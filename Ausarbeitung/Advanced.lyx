#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
% in case somebody want to have the label "Equation"
%\renewcommand{\eqref}[1]{Equation~(\negthinspace\autoref{#1})}

% that links to image floats jumps to the beginning
% of the float and not to its caption
\usepackage[figure]{hypcap}

% the pages of the TOC is numbered roman
% and a pdf-bookmark for the TOC is added
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
  \frontmatter
  \pdfbookmark[1]{\contentsname}{}
  \myTOC
  \mainmatter }

% makes caption labels bold
% for more info about these settings, see
% https://ctan.org/tex-archive/macros/latex/contrib/koma-script/doc/scrguien.pdf
\setkomafont{captionlabel}{\bfseries}
\setcapindent{1em}

% enables calculations
\usepackage{calc}

% fancy page header/footer settings
% for more information see section 9 of
% ftp://www.ctan.org/pub/tex-archive/macros/latex2e/contrib/fancyhdr/fancyhdr.pdf
\renewcommand{\chaptermark}[1]{\markboth{#1}{#1}}
\renewcommand{\sectionmark}[1]{\markright{\thesection\ #1}}

% increases the bottom float placement fraction
\renewcommand{\bottomfraction}{0.5}

% avoids that floats are placed above its sections
\let\mySection\section\renewcommand{\section}{\suppressfloats[t]\mySection}

% increases link area for cross-references and autoname them
% if you change the document language to e.g. French
% you must change "extrasenglish" to "extrasfrench"
% if you uncomment the following lines, you cannot use the reference version Ref+Text in LyX
%\AtBeginDocument{%
% \renewcommand{\ref}[1]{\autoref{#1}}
%}
%\def\refnamechanges{%
% \renewcommand*{\equationautorefname}[1]{}
% \renewcommand{\sectionautorefname}{sec.\negthinspace}
% \renewcommand{\subsectionautorefname}{sec.\negthinspace}
% \renewcommand{\subsubsectionautorefname}{sec.\negthinspace}
% \renewcommand{\figureautorefname}{Fig.\negthinspace}
% \renewcommand{\tableautorefname}{Tab.\negthinspace}
%}
%\@ifpackageloaded{babel}{\addto\extrasenglish{\refnamechanges}}{\refnamechanges}
\end_preamble
\options intoc,bibliography=totoc,index=totoc,BCOR10mm,captions=tableheading,titlepage
\use_default_options true
\master Thread Management.lyx
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement h
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Your title"
\pdf_author "Your name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 1
\branch Standalone
\selected 1
\filename_suffix 0
\color #ff0000
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\is_math_indent 1
\math_indentation default
\math_numbering_side default
\quotes_style german
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Weiterführende Konzepte
\begin_inset CommandInset label
LatexCommand label
name "chap:advanced-concepts"

\end_inset


\end_layout

\begin_layout Standard
Dieses Kapitel stellt Konzepte vor, die über den grundlegenden Umgang mit
 
\lang english
Threads
\lang ngerman
 hinausgehen.
 Es nennt die Eigenschaften von 
\lang english
Thread
\lang ngerman
-Objekten, erklärt 
\lang english
Daemon
\lang ngerman
-
\lang english
Threads
\lang ngerman
, 
\lang english
Thread
\lang ngerman
-Gruppierung und das Erstellen von 
\lang english
Threads
\lang ngerman
 über Fabrikmethoden.
 Darüber hinaus wird der Umgang mit in 
\lang english
Threads
\lang ngerman
 auftretenden Ausnahmen vermittelt und der Leser für den Aspekt der Datenlokalit
ät sensibilisiert.
\end_layout

\begin_layout Section
Eigenschaften von 
\lang english
Thread
\lang ngerman
-Objekten
\end_layout

\begin_layout Standard

\lang english
Threads
\lang ngerman
 haben in Java eine eindeutige ID, einen Namen, eine Priorität zwischen
 1 und 10 und einen Status.
 Von diesen Eigenschaften können nur Name und Priorität nachträglich geändert
 werden.
 ID und Status werden von Java verwaltet.
 Alle diese Eigenschaften werden automatisch mit Werten initialisiert, sofern
 sie nicht vorher vom Entwickler bestimmt wurden.
\end_layout

\begin_layout Standard
Anhand der Priorität eines 
\lang english
Threads
\lang ngerman
 wird dem Betriebssystem die Möglichkeit gegeben, eine Ausführungsreihenfolge
 der 
\lang english
Threads
\lang ngerman
 zu bestimmen.
 Die Priorität eines Threads wird an von ihm erzeugte 
\lang english
Threads
\lang ngerman
 vererbt.
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "thread-statuses"

\end_inset

Der Status eines 
\lang english
Threads
\lang ngerman
 ist
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

NEW
\end_layout

\end_inset

, wenn er noch nicht gestartet wurde,
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

RUNNABLE
\end_layout

\end_inset

, wenn er aktuell ausgeführt wird,
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

BLOCKED
\end_layout

\end_inset

, wenn er auf einen 
\lang english
Monitor
\lang ngerman

\begin_inset Foot
status open

\begin_layout Plain Layout
Das Konzept von Monitoren wird in einer folgenden Seminararbeit erläutert.
\end_layout

\end_inset

 wartet,
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

WAITING
\end_layout

\end_inset

, wenn er auf einen anderen 
\lang english
Thread
\lang ngerman
 wartet,
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

TIMED_WAITING
\end_layout

\end_inset

, wenn er zeitbegrenzt auf einen anderen 
\lang english
Thread
\lang ngerman
 wartet oder
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

TERMINATED
\end_layout

\end_inset

, wenn er beendet wurde.
\end_layout

\begin_layout Standard
Siehe Algorithmus 
\begin_inset CommandInset ref
LatexCommand formatted
reference "alg:properties"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,breaklines=true"
inline false
status open

\begin_layout Plain Layout

Thread t = new Thread(() -> {
\end_layout

\begin_layout Plain Layout

    // Endlose Schleife bis zum Unterbrechen.
\end_layout

\begin_layout Plain Layout

    while (true) {
\end_layout

\begin_layout Plain Layout

        if (Thread.interrupted()) {
\end_layout

\begin_layout Plain Layout

            return;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

System.out.printf("Id: %s
\backslash
nName: %s
\backslash
nPrioritaet: %s
\backslash
nStatus: %s
\backslash
n
\backslash
n",
\end_layout

\begin_layout Plain Layout

        t.getId(), t.getName(), t.getPriority(), t.getState());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

t.setName("Calculator");
\end_layout

\begin_layout Plain Layout

t.setPriority(1);
\end_layout

\begin_layout Plain Layout

t.start();
\end_layout

\begin_layout Plain Layout

System.out.printf("Name: %s
\backslash
nPrioritaet: %s
\backslash
nStatus: %s
\backslash
n
\backslash
n",
\end_layout

\begin_layout Plain Layout

        t.getName(), t.getPriority(), t.getState());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

t.interrupt();
\end_layout

\begin_layout Plain Layout

t.join();
\end_layout

\begin_layout Plain Layout

System.out.printf("Status: %s
\backslash
n
\backslash
n", t.getState());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Ausgabe:
\end_layout

\begin_layout Plain Layout

Id: 11
\end_layout

\begin_layout Plain Layout

Name: Thread-0
\end_layout

\begin_layout Plain Layout

Prioritaet: 5
\end_layout

\begin_layout Plain Layout

Status: NEW
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Name: Calculator
\end_layout

\begin_layout Plain Layout

Prioritaet: 1
\end_layout

\begin_layout Plain Layout

Status: RUNNABLE
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Status: TERMINATED
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Setzen und Anzeigen von 
\lang english
Thread
\lang ngerman
-Eigenschaften.
\begin_inset CommandInset label
LatexCommand label
name "alg:properties"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section

\lang english
Daemon
\lang ngerman
-
\lang english
Threads
\end_layout

\begin_layout Standard
Java unterscheidet zwischen normalen und 
\lang english
Daemon
\lang ngerman
-
\lang english
Threads
\lang ngerman
.
 
\lang english
Daemon
\lang ngerman
-
\lang english
Threads
\lang ngerman
 werden meist für Dienste verwendet, die abseits der Primärlogik eines Programms
 auf Ereignisse warten.
 Wenn alle normalen 
\lang english
Threads
\lang ngerman
 beendet sind und nur noch 
\lang english
Daemon-Threads
\lang ngerman
 laufen, beendet die Java Virtual Machine (JVM) auch diese und damit die
 gesamte Anwendung
\begin_inset Foot
status open

\begin_layout Plain Layout
Eine Java-Anwendung wird auch beendet, wenn 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

System.exit()
\end_layout

\end_inset

 aufgerufen wird.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Über die Methode
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

setDaemon()
\end_layout

\end_inset

 der Klasse
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

Thread
\end_layout

\end_inset

 kann die 
\lang english
Daemon
\lang ngerman
-Eigenschaft eines 
\lang english
Threads
\lang ngerman
 vor dessen Start gesetzt werden.
 Genau wie die Priorität wird der 
\lang english
Daemon
\lang ngerman
-Status an neue 
\lang english
Threads
\lang ngerman
 vererbt.
\end_layout

\begin_layout Standard
Siehe Algorithmus 
\begin_inset CommandInset ref
LatexCommand formatted
reference "alg:daemon"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,breaklines=true"
inline false
status open

\begin_layout Plain Layout

public static void main(String[] args) {
\end_layout

\begin_layout Plain Layout

    Thread daemon = new Thread(() -> {
\end_layout

\begin_layout Plain Layout

        while (true) {}
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\begin_layout Plain Layout

    daemon.setDaemon(true);
\end_layout

\begin_layout Plain Layout

    daemon.start();
\end_layout

\begin_layout Plain Layout

    // Dieses Programm endet hier trotz der Endlosschleife im Daemon-Thread.
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Einen 
\lang english
Daemon
\lang ngerman
-
\lang english
Thread
\lang ngerman
 ausführen.
\begin_inset CommandInset label
LatexCommand label
name "alg:daemon"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section

\lang english
Thread
\lang ngerman
-Gruppen
\end_layout

\begin_layout Standard
Um mit mehreren 
\lang english
Threads
\lang ngerman
 strukturiert arbeiten zu können, lassen sich 
\lang english
Threads
\lang ngerman
 in Java gruppieren.
 Die Klasse
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

ThreadGroup
\end_layout

\end_inset

 fasst sowohl 
\lang english
Threads
\lang ngerman
 als auch andere 
\lang english
Thread
\lang ngerman
-Gruppen in einer baumartigen Struktur zusammen.
 Operationen, die auf eine 
\lang english
Thread
\lang ngerman
-Gruppe angewendet werden, werden auf alle 
\lang english
Threads
\lang ngerman
 in dieser angewendet.
 Darüber hinaus kann für eine 
\lang english
Thread
\lang ngerman
-Gruppe z.B.
 auch eine Schätzung der Anzahl in ihr aktiver 
\lang english
Threads
\lang ngerman
 abgefragt werden.
\end_layout

\begin_layout Standard
Siehe Algorithmus 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:group"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,breaklines=true"
inline false
status open

\begin_layout Plain Layout

ThreadGroup parentGroup = new ThreadGroup("Parent");
\end_layout

\begin_layout Plain Layout

new ThreadGroup(parentGroup, "Child");
\end_layout

\begin_layout Plain Layout

new Thread(parentGroup, () -> {});
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Eine 
\lang english
Thread
\lang ngerman
-Gruppe erzeugen, die eine andere 
\lang english
Thread
\lang ngerman
-Gruppe und einen Thread enthält.
\begin_inset CommandInset label
LatexCommand label
name "alg:group"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section

\lang english
Thread
\lang ngerman
-Factories
\end_layout

\begin_layout Standard
Eine Fabrikmethode ist eine Methode, die Objekte erzeugt.
 Mithilfe einer Fabrikmethode lässt sich im Vergleich zu einem Konstruktoraufruf
 zusätzliche Kontrolle über den Erzeugungsprozess von Objekten erlangen.
 Beispielsweise befindet sich der 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

new
\end_layout

\end_inset

-Operator bei Verwendung einer Fabrikmethode in dieser Methode, was einen
 Austausch der zu erzeugenden Klasse vereinfacht.
 Oft definiert eine Klasse eine abstrakte Fabrikmethode, um ihren Unterklassen
 zu ermöglichen, die Methode verschieden zu implementieren.
\end_layout

\begin_layout Standard
Auch 
\lang english
Threads
\lang ngerman
 können nach dem 
\lang english
Factory Pattern
\lang ngerman

\begin_inset Foot
status open

\begin_layout Plain Layout
Siehe Kapitel 2.1 in: Joshua Bloch.
 
\shape italic
Effective Java
\shape default
.
 Addison Wesley, 1.
 Jan.
 2018.
 ISBN: 0134685997.
\end_layout

\end_inset

 erzeugt werden.
 Dafür muss in einer eigenen Klasse das 
\lang english
Interface
\lang ngerman

\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

ThreadFactory
\end_layout

\end_inset

 implementiert und die Methode
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

newThread()
\end_layout

\end_inset

 überschrieben werden.
\end_layout

\begin_layout Standard
Siehe Algorithmus 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:factory"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,breaklines=true"
inline false
status open

\begin_layout Plain Layout

java.util.concurrent.ThreadFactory threadFactory = r -> null; // java.util.concurrent.
ThreadFactory kann auch importiert werden.
\end_layout

\begin_layout Plain Layout

Thread t = threadFactory.newThread(() -> {});
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if (t == null) {
\end_layout

\begin_layout Plain Layout

    System.out.println("Thread ist null.");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Gibt "Thread ist null." aus.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Erzeugen eines 
\lang english
Threads
\lang ngerman
 mittels Fabrikmethode.
\begin_inset CommandInset label
LatexCommand label
name "alg:factory"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch Standalone
inverted 0
status collapsed

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The contents of this branch is only output if this chapter is processed
 on its own, i.
\begin_inset space \thinspace{}
\end_inset

e., not from the master.
 This allows you to have a bibliography and a nomenclature if you only want
 to output this chapter.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "Bibliography.lyx"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Ausnahmebehandlung
\begin_inset CommandInset label
LatexCommand label
name "chap:ExceptionHandling"

\end_inset


\end_layout

\begin_layout Standard
Wird beim Überprüfen des Unterbrechungsindikators (Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:interrupt"
plural "false"
caps "false"
noprefix "false"

\end_inset

) entdeckt, dass der ausführende 
\lang english
Thread
\lang ngerman
 unterbrochen werden soll, ermöglicht das Auslösen einer
\begin_inset Newline newline
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

InterruptedException
\end_layout

\end_inset

 übergeordnetem Code, diese Entdeckung individuell zu behandeln.
 Ein Beispiel für dieses Verhalten ist die Methode
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

sleep()
\end_layout

\end_inset

 (Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:pause"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
Die 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

InterruptedException
\end_layout

\end_inset

 ist eine sogenannte 
\shape italic
\lang english
checked exceptio
\lang ngerman
n
\shape default
 und muss deshalb in der Methode, in der sie auftritt, gefangen oder per
 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

throws
\end_layout

\end_inset

 an die übergeordnete Methode weitergereicht werden
\begin_inset Foot
status open

\begin_layout Plain Layout
Näheres zu Ausnahmen in Java unter: 
\begin_inset CommandInset href
LatexCommand href
target "https://docs.oracle.com/javase/tutorial/essential/exceptions/"

\end_inset


\end_layout

\end_inset

.
 Letzteres ist für 
\lang english
Threads
\lang ngerman
 aufgrund der vorgegebenen Methodensignatur von
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

run()
\end_layout

\end_inset

 nicht möglich.
\end_layout

\begin_layout Standard
Tritt eine 
\shape italic
\lang english
unchecked exception
\shape default
\lang ngerman

\begin_inset Foot
status open

\begin_layout Plain Layout
z.B.
 eine 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

NumberFormatException
\end_layout

\end_inset


\end_layout

\end_inset

 auf, gibt Java standardmäßig den 
\lang english
Stacktrace
\lang ngerman
 auf der Konsole aus und beendet das Programm.
 Für die Behandlung solcher Ausnahmen in 
\lang english
Threads
\lang ngerman
 erlaubt Java die Angabe einer Klasse, die das 
\lang english
Interface
\lang ngerman
 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

UncaughtExceptionHandler
\end_layout

\end_inset

 implementiert und vor 
\lang english
Thread
\lang ngerman
-Start über die Methode
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

setUncaughtExceptionHandler()
\end_layout

\end_inset

 angegeben werden kann.
 Soll eine Ausnahmebehandlungsroutine hingegen für 
\lang english
Thread
\lang ngerman
-Gruppen angegeben werden, muss die Klasse
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

ThreadGroup
\end_layout

\end_inset

 erweitert werden.
 In beiden Fällen ist es nötig, die Methode
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

uncaughtException()
\end_layout

\end_inset

 zu überschreiben.
\end_layout

\begin_layout Standard
Siehe Algorithmus 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:exception"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,breaklines=true"
inline false
status open

\begin_layout Plain Layout

public class ExceptionHandling {
\end_layout

\begin_layout Plain Layout

    static class EndlessThread extends Thread {
\end_layout

\begin_layout Plain Layout

        @Override
\end_layout

\begin_layout Plain Layout

        public void run() {
\end_layout

\begin_layout Plain Layout

            try {
\end_layout

\begin_layout Plain Layout

                throw new InterruptedException();
\end_layout

\begin_layout Plain Layout

            } catch (InterruptedException e) {
\end_layout

\begin_layout Plain Layout

                throw new NumberFormatException();
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    static class UncaughtExceptionHandler implements Thread.UncaughtExceptionHand
ler {
\end_layout

\begin_layout Plain Layout

        @Override
\end_layout

\begin_layout Plain Layout

        public void uncaughtException(Thread t, Throwable e) {
\end_layout

\begin_layout Plain Layout

            System.out.printf("Look! A %s!
\backslash
n", e);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public static void main(String[] args) {
\end_layout

\begin_layout Plain Layout

        Thread endlessThread = new EndlessThread();
\end_layout

\begin_layout Plain Layout

        endlessThread.setUncaughtExceptionHandler(new UncaughtExceptionHandler())
;
\end_layout

\begin_layout Plain Layout

        endlessThread.start();
\end_layout

\begin_layout Plain Layout

        // Gibt "Look! A java.lang.NumberFormatException!" aus.
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ausnahmebehandlung mittels 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

UncaughtExceptionHandler
\end_layout

\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "alg:exception"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Datenlokalität
\end_layout

\begin_layout Standard
Startet man mehrere 
\lang english
Threads
\lang ngerman
 mit Instanzen derselben Runnable-Klasse, wirkt sich das Ändern eines Instanzatt
ibuts des Runnables auf alle 
\lang english
Threads
\lang ngerman
 aus.
 Attribute, die mit einer unabhängigen Variablenkopie arbeiten sollen, können
 als Typ der Klasse
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

ThreadLocal
\end_layout

\end_inset

 definiert werden.
 Sie sind aufgrund dieser Lokalität üblicherweise
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

private static
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Siehe Algorithmus 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:locality"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,breaklines=true"
inline false
status open

\begin_layout Plain Layout

import java.util.Date;
\end_layout

\begin_layout Plain Layout

import java.util.concurrent.TimeUnit;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Locality {
\end_layout

\begin_layout Plain Layout

    static class LocalDataRunnable implements Runnable {
\end_layout

\begin_layout Plain Layout

        private static ThreadLocal<Date> dateLocal = ThreadLocal.withInitial(Date
::new);
\end_layout

\begin_layout Plain Layout

        Date dateShared = new Date();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        @Override
\end_layout

\begin_layout Plain Layout

        public void run() {
\end_layout

\begin_layout Plain Layout

            System.out.printf("[dateLocal] %s
\backslash
n", dateLocal.get());
\end_layout

\begin_layout Plain Layout

            System.out.printf("[dateShared] %s
\backslash
n", dateShared);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public static void main(String[] args) throws InterruptedException {
\end_layout

\begin_layout Plain Layout

        Thread t1 = new Thread(new LocalDataRunnable()),
\end_layout

\begin_layout Plain Layout

                t2 = new Thread(new LocalDataRunnable());
\end_layout

\begin_layout Plain Layout

        t1.start();
\end_layout

\begin_layout Plain Layout

        t1.join();
\end_layout

\begin_layout Plain Layout

        TimeUnit.SECONDS.sleep(2);
\end_layout

\begin_layout Plain Layout

        t2.start();
\end_layout

\begin_layout Plain Layout

        t2.join();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        /* Ausgabe z.B.:
\end_layout

\begin_layout Plain Layout

        [dateLocal] Fri Nov 01 20:00:00 CET 2019
\end_layout

\begin_layout Plain Layout

        [dateShared] Fri Nov 01 20:00:00 CET 2019
\end_layout

\begin_layout Plain Layout

        [dateLocal] Fri Nov 01 20:00:02 CET 2019
\end_layout

\begin_layout Plain Layout

        [dateShared] Fri Nov 01 20:00:00 CET 2019
\end_layout

\begin_layout Plain Layout

         */ // [dateShared] bleibt beim ursprünglichen Wert.
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Verwendung der Klasse
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

ThreadLocal
\end_layout

\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "alg:locality"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch Standalone
inverted 0
status collapsed

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The contents of this branch is only output if this chapter is processed
 on its own, i.
\begin_inset space \thinspace{}
\end_inset

e., not from the master.
 This allows you to have a bibliography and a nomenclature if you only want
 to output this chapter.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "Bibliography.lyx"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
