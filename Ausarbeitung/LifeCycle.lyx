#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
% in case somebody want to have the label "Equation"
%\renewcommand{\eqref}[1]{Equation~(\negthinspace\autoref{#1})}

% that links to image floats jumps to the beginning
% of the float and not to its caption
\usepackage[figure]{hypcap}

% the pages of the TOC is numbered roman
% and a pdf-bookmark for the TOC is added
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
  \frontmatter
  \pdfbookmark[1]{\contentsname}{}
  \myTOC
  \mainmatter }

% makes caption labels bold
% for more info about these settings, see
% https://ctan.org/tex-archive/macros/latex/contrib/koma-script/doc/scrguien.pdf
\setkomafont{captionlabel}{\bfseries}
\setcapindent{1em}

% enables calculations
\usepackage{calc}

% fancy page header/footer settings
% for more information see section 9 of
% ftp://www.ctan.org/pub/tex-archive/macros/latex2e/contrib/fancyhdr/fancyhdr.pdf
\renewcommand{\chaptermark}[1]{\markboth{#1}{#1}}
\renewcommand{\sectionmark}[1]{\markright{\thesection\ #1}}

% increases the bottom float placement fraction
\renewcommand{\bottomfraction}{0.5}

% avoids that floats are placed above its sections
\let\mySection\section\renewcommand{\section}{\suppressfloats[t]\mySection}

% increases link area for cross-references and autoname them
% if you change the document language to e.g. French
% you must change "extrasenglish" to "extrasfrench"
% if you uncomment the following lines, you cannot use the reference version Ref+Text in LyX
%\AtBeginDocument{%
% \renewcommand{\ref}[1]{\autoref{#1}}
%}
%\def\refnamechanges{%
% \renewcommand*{\equationautorefname}[1]{}
% \renewcommand{\sectionautorefname}{sec.\negthinspace}
% \renewcommand{\subsectionautorefname}{sec.\negthinspace}
% \renewcommand{\subsubsectionautorefname}{sec.\negthinspace}
% \renewcommand{\figureautorefname}{Fig.\negthinspace}
% \renewcommand{\tableautorefname}{Tab.\negthinspace}
%}
%\@ifpackageloaded{babel}{\addto\extrasenglish{\refnamechanges}}{\refnamechanges}
\end_preamble
\options intoc,bibliography=totoc,index=totoc,BCOR10mm,captions=tableheading,titlepage
\use_default_options true
\master Thread Management.lyx
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement h
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Your title"
\pdf_author "Your name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 1
\branch Standalone
\selected 1
\filename_suffix 0
\color #ff0000
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\is_math_indent 1
\math_indentation default
\math_numbering_side default
\quotes_style german
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Mit 
\lang english
Threads
\lang ngerman
 arbeiten
\begin_inset CommandInset label
LatexCommand label
name "chap:working-with-threads"

\end_inset


\end_layout

\begin_layout Standard
Im Folgenden wird der Umgang mit 
\lang english
Thread
\lang ngerman
-Objekten zur nebenläufigen Programmierung in Java vorgestellt.
 Alle genannten Klassen sind Teil des 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

java.lang
\end_layout

\end_inset


\begin_inset space ~
\end_inset

Pakets
\begin_inset Foot
status open

\begin_layout Plain Layout
Dokumentation: 
\begin_inset CommandInset href
LatexCommand href
target "https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/package-summary.html"

\end_inset


\end_layout

\end_inset

, welches schon seit Version
\begin_inset space ~
\end_inset

1 in Java enthalten ist
\begin_inset Foot
status open

\begin_layout Plain Layout
Seit Version
\begin_inset space ~
\end_inset

1.5 erleichtern die Hilfsklassen im 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

java.util.concurrent
\end_layout

\end_inset


\begin_inset space ~
\end_inset

Paket nebenläufige Programmierung in Java.
\end_layout

\end_inset

 und an welchem mittlerweile kaum noch etwas verändert wird.
 Die einzige nennenswerte Änderung in den letzten Java-Versionen ist das
 Entfernen der Methoden
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

destroy()
\end_layout

\end_inset

 und 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

stop()
\end_layout

\end_inset

 aus der Klasse
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

Thread
\end_layout

\end_inset

 zu Java 11.
 Die Methoden waren schon lange als 
\shape italic
\lang english
deprecated
\shape default
\lang ngerman
 markiert und unfunktional oder gar nicht erst implementiert.
 Grund dafür war, dass die Verwendung dieser Methoden zu Deadlocks oder
 undefiniertem Verhalten führen konnte
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8204243"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Erzeugen und Ausführen
\end_layout

\begin_layout Standard
Es gibt in Java zwei Möglichkeiten, 
\lang english
Thread
\lang ngerman
-Objekte zu erzeugen: Entweder erstellt man eine Unterklasse der Klasse
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

Thread
\end_layout

\end_inset

 oder man instanziiert die Klasse
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

Thread
\end_layout

\end_inset

 mithilfe eines 
\shape italic
Runnables
\shape default
, also einem Objekt, das das 
\lang english
Interface
\lang ngerman

\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

Runnable
\end_layout

\end_inset

 implementiert.
 In beiden Fällen muss die Methode
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

run()
\end_layout

\end_inset

 überschrieben werden, die festlegt, was der jeweilige 
\lang english
Thread
\lang ngerman
 nach dem Starten ausführen soll.
 Das Implementieren von 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

Runnable
\end_layout

\end_inset

 wird in den meisten Fällen dem Erweitern der Klasse
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

Thread
\end_layout

\end_inset

 vorgezogen, weil Javas Vererbungshierarchie
\begin_inset Foot
status open

\begin_layout Plain Layout
Siehe Kapitel 5.8 in: Christian Ullenboom.
 
\shape italic
Java ist auch eine Insel
\shape default
.
 Rheinwerk Verlag GmbH, 1.
 Jan.
 2019.
 ISBN: 3836267217.
\end_layout

\end_inset

 das Erben von mehr als einer Klasse verbietet.
 Erbt eine eigene Klasse nicht von 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

Thread
\end_layout

\end_inset

, aber von einer anderen Klasse, muss sie das 
\lang english
Interface
\lang ngerman

\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

Runnable
\end_layout

\end_inset

 implementieren, um als 
\lang english
Thread
\lang ngerman
 ausgeführt werden zu können.
\end_layout

\begin_layout Standard
Siehe Algorithmus 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:creation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static class RunnableThread implements Runnable {
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public void run() {
\end_layout

\begin_layout Plain Layout

        // Thread-Logik
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Thread runnableThread = new Thread(new RunnableThread());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static class ExtendsThread extends Thread {
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public void run() {
\end_layout

\begin_layout Plain Layout

        // Thread-Logik
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Thread extendsThread = new ExtendsThread();
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Erzeugung eines 
\lang english
Thread
\lang ngerman
-Objekts durch ein Runnable und durch Erweiterung der Klasse
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

Thread
\end_layout

\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "alg:creation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Pausieren
\begin_inset CommandInset label
LatexCommand label
name "sec:pause"

\end_inset


\end_layout

\begin_layout Standard
Einen 
\lang english
Thread
\lang ngerman
 zu pausieren ist dann sinnvoll, wenn er warten und währenddessen keine
 Prozessorressourcen verschwenden soll.
 Letzteres wäre beispielsweise beim aktiven Warten
\begin_inset Foot
status open

\begin_layout Plain Layout
Warten durch Ausführen von Anweisungen.
\end_layout

\end_inset

 der Fall.
\end_layout

\begin_layout Standard
Zum Pausieren existiert in Java die Funktion 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

Thread.sleep()
\end_layout

\end_inset

, die als ersten Parameter die zu wartenden Millisekunden entgegennimmt.
 Optional können als zweiter Parameter zusätzlich zu wartende Nanosekunden
 angegeben werden.
\end_layout

\begin_layout Standard
Soll für längere Zeit gewartet werden, kann die Enumeration
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

TimeUnit
\end_layout

\end_inset

 zu Hilfe genommen werden.
 Diese erlaubt es direkt, 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

sleep()
\end_layout

\end_inset

 für eine Zeitspanne von Nanosekunden bis Tagen aufzurufen.
\end_layout

\begin_layout Standard
Wird ein 
\lang english
Thread
\lang ngerman
 während des Pausierens unterbrochen (Abschnitt
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:interrupt"
plural "false"
caps "false"
noprefix "false"

\end_inset

), wird sofort eine
\begin_inset Newline newline
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

InterruptedException
\end_layout

\end_inset

 (Abschnitt
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:ExceptionHandling"
plural "false"
caps "false"
noprefix "false"

\end_inset

) ausgelöst.
\end_layout

\begin_layout Standard
Siehe Algorithmus 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:pause"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,breaklines=true"
inline false
status open

\begin_layout Plain Layout

try {
\end_layout

\begin_layout Plain Layout

    Thread.sleep(1000);
\end_layout

\begin_layout Plain Layout

    java.util.concurrent.TimeUnit.SECONDS.sleep(1); // java.util.concurrent.TimeUnit
 kann auch importiert werden.
\end_layout

\begin_layout Plain Layout

} catch (InterruptedException e) {
\end_layout

\begin_layout Plain Layout

    throw new NumberFormatException();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Eine Sekunde pausieren mittels 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

Thread.sleep()
\end_layout

\end_inset

 und der Enumeration
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

TimeUnit
\end_layout

\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "alg:pause"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Auf einen anderen 
\lang english
Thread
\lang ngerman
 warten
\end_layout

\begin_layout Standard
Besteht eine Abhängigkeit in der Ausführungsreihenfolge von zwei 
\lang english
Threads
\lang ngerman
, muss ein 
\lang english
Thread
\lang ngerman
 oft auf die Beendigung eines anderen 
\lang english
Threads
\lang ngerman
 warten.
 In Java kann mit der Methode
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

join()
\end_layout

\end_inset

 der Klasse
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

Thread
\end_layout

\end_inset

 die Ausführung des aufrufenden 
\lang english
Threads
\lang ngerman
 bis zur Beendigung des referenzierten 
\lang english
Threads
\lang ngerman
 ausgesetzt werden.
 Der Haupt-
\lang english
Thread
\lang ngerman
 eines Programms könnte etwa von Nebenläufigkeit profitierende Berechnungen
 von mehreren 
\lang english
Threads
\lang ngerman
 ausführen lassen und, nachdem ein
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

join()
\end_layout

\end_inset

 für all diese 
\lang english
Threads
\lang ngerman
 beendet wurde, das Gesamtergebnis schneller ausgeben, als eine sequentielle
 Berechnung gedauert hätte.
\end_layout

\begin_layout Standard
Siehe Algorithmus 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:wait"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,breaklines=true"
inline false
status open

\begin_layout Plain Layout

public static void main(String[] args) throws InterruptedException {
\end_layout

\begin_layout Plain Layout

    Thread calc = new Thread(() -> {
\end_layout

\begin_layout Plain Layout

        // irgendeine Berechnung
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\begin_layout Plain Layout

    calc.start();
\end_layout

\begin_layout Plain Layout

    calc.join(); // Kann eine InterruptedException auslösen.
 Siehe Methodensignatur.
\end_layout

\begin_layout Plain Layout

    // Ab dieser Zeile ist die Berechnung mit Sicherheit abgeschlossen.
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Warten mittels 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

join()
\end_layout

\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "alg:wait"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Unterbrechen
\begin_inset CommandInset label
LatexCommand label
name "sec:interrupt"

\end_inset


\end_layout

\begin_layout Standard
Die Methode
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

interrupt()
\end_layout

\end_inset

 markiert ein 
\lang english
Thread
\lang ngerman
-Objekt für die Unterbrechung.
 
\lang english
Threads
\lang ngerman
 können diese Angabe überprüfen und respektieren, müssen es aber nicht.
\end_layout

\begin_layout Standard
Zum Überprüfen, ob ein 
\lang english
Thread
\lang ngerman
 unterbrochen werden soll, existieren zwei ähnlich benannte Methoden: 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

interrupted()
\end_layout

\end_inset

 und 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

isInterrupted()
\end_layout

\end_inset

.
 Auch geben beide Methoden einen 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

boolean
\end_layout

\end_inset

 zurück und können wegen diesen Ähnlichkeiten Verwirrung stiften
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://stackoverflow.com/q/16916238/4682621"

\end_inset


\end_layout

\end_inset

.
 Sie unterscheiden sich in zwei Eigenschaften: zum einen ist 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

interrupted()
\end_layout

\end_inset

 eine statische Methode, 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

isInterrupted()
\end_layout

\end_inset

 nicht.
 Zum anderen setzt 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

interrupted()
\end_layout

\end_inset

 den Unterbrechungsindikator eines 
\lang english
Threads
\lang ngerman
 auf 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

false
\end_layout

\end_inset

 zurück.
 Soll der Unterbrechungsindikator eines 
\lang english
Thread
\lang ngerman
-Objekts abgefragt werden, empfiehlt sich also die Verwendung von 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

isInterrupted()
\end_layout

\end_inset

.
 Zur Überprüfung innerhalb desselben 
\lang english
Threads
\lang ngerman
 kann auch 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

interrupted()
\end_layout

\end_inset

 verwendet werden.
\end_layout

\begin_layout Standard
Siehe Algorithmus 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:interrupt"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,breaklines=true"
inline false
status open

\begin_layout Plain Layout

Thread calc = new Thread(() -> {
\end_layout

\begin_layout Plain Layout

    // Endlose Schleife bis zum Unterbrechen.
\end_layout

\begin_layout Plain Layout

    while (true) {
\end_layout

\begin_layout Plain Layout

        if (Thread.interrupted()) {
\end_layout

\begin_layout Plain Layout

            return;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

calc.interrupt();
\end_layout

\begin_layout Plain Layout

System.out.println("Unterbrechungsindikator ist" + (calc.isInterrupted() ?
 "" : " nicht") + " gesetzt.");
\end_layout

\begin_layout Plain Layout

// Gibt "Unterbrechungsindikator ist nicht gesetzt." aus.
\end_layout

\begin_layout Plain Layout

// Der Indikator wurde von interrupted() zurückgesetzt.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Unterbrechen mittels 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

interrupt()
\end_layout

\end_inset

, Indikatorprüfung mittels 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

interrupted()
\end_layout

\end_inset

 und 
\begin_inset listings
lstparams "language=Java"
inline true
status open

\begin_layout Plain Layout

isInterrupted()
\end_layout

\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "alg:interrupt"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch Standalone
inverted 0
status collapsed

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The contents of this branch is only output if this chapter is processed
 on its own, i.
\begin_inset space \thinspace{}
\end_inset

e., not from the master.
 This allows you to have a bibliography and a nomenclature if you only want
 to output this chapter.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "Bibliography.lyx"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
